document.addEventListener("DOMContentLoaded", function () {
    const container = document.querySelector(".account-info");
    if (!container) return;

    const updateBtn = container.querySelector(".btn");
    const fullnameInput = container.querySelector("#fullname");
    const phoneInput = container.querySelector("#phoneNumber");
    const emailInput = container.querySelector("#email");
    const birthdayInput = container.querySelector("#birthday");
    const genderInputs = container.querySelectorAll('input[name="gender"]');

    // üîπ Regex chu·∫©n
    const namePattern = /^[\p{L}\s]{2,50}$/u;
    const phonePattern = /^(0[3|5|7|8|9])[0-9]{8}$/;
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    const addressPattern = /^[A-Za-z√Ä-·ªπ√†-·ªπƒêƒë0-9\s,./()-]{5,100}$/;

    // üîπ Danh s√°ch qu·∫≠n / huy·ªán theo t·ªânh
    const districtsByCity = {
        "H√† N·ªôi": ["Ba ƒê√¨nh", "Ho√†n Ki·∫øm", "ƒê·ªëng ƒêa", "C·∫ßu Gi·∫•y", "Hai B√† Tr∆∞ng", "Thanh Xu√¢n", "Nam T·ª´ Li√™m", "B·∫Øc T·ª´ Li√™m", "T√¢y H·ªì", "Long Bi√™n"],
        "H·ªì Ch√≠ Minh": ["Qu·∫≠n 1", "Qu·∫≠n 3", "Qu·∫≠n 5", "Qu·∫≠n 7", "G√≤ V·∫•p", "T√¢n B√¨nh", "Ph√∫ Nhu·∫≠n", "B√¨nh Th·∫°nh", "Th·ªß ƒê·ª©c", "B√¨nh T√¢n"],
        "ƒê√† N·∫µng": ["H·∫£i Ch√¢u", "Thanh Kh√™", "S∆°n Tr√†", "Ng≈© H√†nh S∆°n", "Li√™n Chi·ªÉu", "C·∫©m L·ªá"],
        "H·∫£i Ph√≤ng": ["H·ªìng B√†ng", "Ng√¥ Quy·ªÅn", "L√™ Ch√¢n", "Ki·∫øn An", "H·∫£i An", "ƒê·ªì S∆°n", "D∆∞∆°ng Kinh"],
        "C·∫ßn Th∆°": ["Ninh Ki·ªÅu", "B√¨nh Th·ªßy", "C√°i RƒÉng", "√î M√¥n", "Th·ªët N·ªët"]
    };

    // üîπ H√†m hi·ªÉn th·ªã l·ªói
    function showError(element, message) {
        if (!element) return;
        let err = element.nextElementSibling;
        if (!err || !err.classList.contains("error")) {
            err = document.createElement("div");
            err.classList.add("error");
            err.style.color = "red";
            err.style.fontSize = "14px";
            err.style.marginTop = "4px";
            element.insertAdjacentElement("afterend", err);
        }
        err.textContent = message;
    }


    function clearErrors() {
        container.querySelectorAll(".error").forEach(e => (e.textContent = ""));
    }

    // üîπ Validate fullname
    function validateFullname() {
        const fullname = fullnameInput.value.trim();
        if (fullname === "") {
            showError(fullnameInput, "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            return false;
        } else if (!namePattern.test(fullname)) {
            showError(fullnameInput, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng (ch·ªâ ch·ªØ c√°i, kh√¥ng s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát)");
            return false;
        } else {
            showError(fullnameInput, "");
            return true;
        }
    }

    // üîπ Gi·ªõi h·∫°n & realtime fullname
    fullnameInput.addEventListener("input", function () {
        this.value = this.value.replace(/[^\p{L}\s]/gu, "");
        if (this.value.length > 50) this.value = this.value.slice(0, 50);

        const val = this.value.trim();
        if (val === "") {
            showError(fullnameInput, "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        } else if (!namePattern.test(val)) {
            showError(fullnameInput, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng (ch·ªâ ch·ªØ c√°i, kh√¥ng s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát)");
        } else {
            showError(fullnameInput, "");
        }
    });

    fullnameInput.addEventListener("blur", validateFullname);

    // üîπ Phone realtime
    phoneInput.addEventListener("input", function () {
        this.value = this.value.replace(/[^0-9]/g, "");
        if (this.value.length > 10) this.value = this.value.slice(0, 10);

        if (this.value.length === 0) {
            showError(phoneInput, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        } else if (this.value.length < 10) {
            showError(phoneInput, "Vui l√≤ng nh·∫≠p ƒë·ªß 10 ch·ªØ s·ªë");
        } else if (!phonePattern.test(this.value)) {
            showError(phoneInput, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (03,05,07,08,09 + 8 s·ªë)");
        } else {
            showError(phoneInput, "");
        }
    });

    updateBtn.addEventListener("click", function (e) {
        e.preventDefault();
        clearErrors();
        let isValid = true;

        if (!validateFullname()) isValid = false;
        if (!phoneInput.value.trim() || !phonePattern.test(phoneInput.value.trim())) {
            showError(phoneInput, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá");
            isValid = false;
        }
        if (!emailPattern.test(emailInput.value.trim())) {
            showError(emailInput, "Email kh√¥ng h·ª£p l·ªá");
            isValid = false;
        }

        const birthday = birthdayInput.value.trim();
        if (birthday === "") {
            showError(birthdayInput, "Ng√†y sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            isValid = false;
        }

        const gender = document.querySelector('input[name="gender"]:checked')?.value || "";
        const genderDiv = container.querySelector(".gender-container");
        if (!gender) {
            showError(genderDiv, "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh");
            isValid = false;
        } else showError(genderDiv, "");

        if (!isValid) return;

        // ‚úÖ ƒê·ªãnh d·∫°ng t√™n
        const name = fullnameInput.value.trim().toLowerCase();
        fullnameInput.value = name.replace(/(^|\s)\S/g, l => l.toUpperCase());

        console.log("‚úÖ H·ªç t√™n sau khi format:", fullnameInput.value);

        // ‚úÖ Hi·ªán x√°c nh·∫≠n v√† g·ª≠i fetch
        if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën c·∫≠p nh·∫≠t th√¥ng tin kh√¥ng?")) {
            return;
        }

        console.log("üîπ N√∫t 'C·∫≠p nh·∫≠t th√¥ng tin' ƒë√£ ƒë∆∞·ª£c nh·∫•n!");

        const phone = phoneInput.value.trim();

        fetch("/profile/update", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            body: new URLSearchParams({
                fullname: fullnameInput.value.trim(),
                phoneNumber: phone,
                birthday: birthday,
                gender: gender
            })
        })
            .then(response => {
                if (response.redirected) {
                    console.log("‚úÖ Server redirect ‚Üí", response.url);
                    window.location.href = response.url;
                } else {
                    console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                    alert("‚úÖ Th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
                }
            })

            .catch(err => {
                console.error("‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu:", err);
                alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t!");
            });
    });

    // ================== üîπ QU·∫¢N L√ù TH√äM / X√ìA ƒê·ªäA CH·ªà üîπ ==================
    const addAddressBtn = document.getElementById("addAddressBtn");
    const addressContainer = document.getElementById("addressContainer");

    if (addAddressBtn && addressContainer) {
        function reindexAddresses() {
            const rows = addressContainer.querySelectorAll(".address-row");
            rows.forEach((row, index) => {
                const label = row.querySelector(".address-label");
                if (label) label.textContent = `ƒê·ªãa ch·ªâ ${index + 1}`;
            });
        }

        // ‚úÖ T·∫°o 1 d√≤ng ƒë·ªãa ch·ªâ m·ªõi
        function createAddressRow(index) {
            const newRow = document.createElement("div");
            newRow.classList.add("address-row");
            newRow.innerHTML = `
                <span class="address-label">ƒê·ªãa ch·ªâ ${index}</span>

                <select name="city[]" class="address-select city-select">
                    <option value="">-- T·ªânh / Th√†nh ph·ªë --</option>
                    <option value="H√† N·ªôi">H√† N·ªôi</option>
                    <option value="H·ªì Ch√≠ Minh">H·ªì Ch√≠ Minh</option>
                    <option value="ƒê√† N·∫µng">ƒê√† N·∫µng</option>
                    <option value="H·∫£i Ph√≤ng">H·∫£i Ph√≤ng</option>
                    <option value="C·∫ßn Th∆°">C·∫ßn Th∆°</option>
                </select>

                <select name="district[]" class="address-select district-select">
                    <option value="">-- Qu·∫≠n / Huy·ªán --</option>
                </select>

                <input type="text" name="street[]" placeholder="Nh·∫≠p ƒë∆∞·ªùng / s·ªë nh√†..." class="address-input street-input">

                <button type="button" class="btn-remove">‚Äì</button>
            `;

            const removeBtn = newRow.querySelector(".btn-remove");
            const citySelect = newRow.querySelector(".city-select");
            const districtSelect = newRow.querySelector(".district-select");

            // üîπ X√≥a d√≤ng
            removeBtn.addEventListener("click", function () {
                const totalRows = addressContainer.querySelectorAll(".address-row").length;
                if (totalRows === 1) {
                    alert("‚ö†Ô∏è Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt ƒë·ªãa ch·ªâ, kh√¥ng th·ªÉ x√≥a d√≤ng cu·ªëi c√πng!");
                    return;
                }
                if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë·ªãa ch·ªâ n√†y kh√¥ng?")) {
                    newRow.remove();
                    reindexAddresses();
                }
            });

            return newRow;
        }

        // ‚úÖ Th√™m d√≤ng m·ªõi
        addAddressBtn.addEventListener("click", function () {
            const inputs = addressContainer.querySelectorAll(".street-input");
            const lastInput = inputs[inputs.length - 1];
            if (!lastInput || lastInput.value.trim() === "") {
                alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ tr∆∞·ªõc khi th√™m m·ªõi!");
                return;
            }

            const newIndex = inputs.length + 1;
            const newRow = createAddressRow(newIndex);
            addressContainer.appendChild(newRow);
            reindexAddresses();
        });

        // ‚úÖ X√≥a cho c√°c d√≤ng c√≥ s·∫µn
        addressContainer.querySelectorAll(".btn-remove").forEach(btn => {
            const row = btn.closest(".address-row");
            btn.addEventListener("click", function () {
                const totalRows = addressContainer.querySelectorAll(".address-row").length;
                if (totalRows === 1) {
                    alert("‚ö†Ô∏è Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt ƒë·ªãa ch·ªâ, kh√¥ng th·ªÉ x√≥a d√≤ng cu·ªëi c√πng!");
                    return;
                }
                if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë·ªãa ch·ªâ n√†y kh√¥ng?")) {
                    row.remove();
                    reindexAddresses();
                }
            });
        });

        // ‚úÖ G·∫Øn s·ª± ki·ªán change cho c√°c city-select c√≥ s·∫µn trong HTML
        addressContainer.querySelectorAll(".city-select").forEach(citySelect => {
            const districtSelect = citySelect.closest(".address-row").querySelector(".district-select");

            citySelect.addEventListener("change", function () {
                const city = this.value;
                districtSelect.innerHTML = '<option value="">-- Qu·∫≠n / Huy·ªán --</option>';

                if (districtsByCity[city]) {
                    districtsByCity[city].forEach(d => {
                        const opt = document.createElement("option");
                        opt.value = d;
                        opt.textContent = d;
                        districtSelect.appendChild(opt);
                    });
                }
            });
        });
    }
});
